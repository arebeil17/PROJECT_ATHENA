`timescale 1ns/1ps
//Author: Generated by yaaaay!! dpgen
module test/output6(a, b, c, d, e, f, g, h, num, avg, clk, rst);
	input 	signed	[15:0]	a;
	input 	signed	[15:0]	b;
	input 	signed	[15:0]	c;
	input 	signed	[15:0]	d;
	input 	signed	[15:0]	e;
	input 	signed	[15:0]	f;
	input 	signed	[15:0]	g;
	input 	signed	[15:0]	h;
	input 	signed	[15:0]	num;
	output 	signed	[15:0]	avg;
	wire 	signed	[15:0]	r1;
	wire 	signed	[15:0]	r2;
	wire 	signed	[15:0]	r3;
	wire 	signed	[15:0]	r4;
	wire 	signed	[15:0]	r5;
	wire 	signed	[15:0]	r6;
	wire 	signed	[15:0]	r7;
	wire 	signed	[15:0]	avgwire;
	wire 	signed	[31:0]	t1;
	wire 	signed	[31:0]	t2;
	wire 	signed	[31:0]	t3;
	wire 	signed	[31:0]	t4;
	wire 	signed	[31:0]	t5;
	wire 	signed	[31:0]	t6;
	wire 	signed	[31:0]	t7;
	input 	clk, rst;
	add #(.DATAWIDTH(32))	ADD0(a[15]?{{16{1'd1}},a}:{{16{1'd0}},a}, b[15]?{{16{1'd1}},b}:{{16{1'd0}},b}, t1);
 	register #(.DATAWIDTH(16))	REG1(clk, rst, t1[15:0], r1);
	add #(.DATAWIDTH(32))	ADD2(r1[15]?{{16{1'd1}},r1}:{{16{1'd0}},r1}, c[15]?{{16{1'd1}},c}:{{16{1'd0}},c}, t2);
 	register #(.DATAWIDTH(16))	REG3(clk, rst, t2[15:0], r2);
	add #(.DATAWIDTH(32))	ADD4(r2[15]?{{16{1'd1}},r2}:{{16{1'd0}},r2}, d[15]?{{16{1'd1}},d}:{{16{1'd0}},d}, t3);
 	register #(.DATAWIDTH(16))	REG5(clk, rst, t3[15:0], r3);
	add #(.DATAWIDTH(32))	ADD6(r3[15]?{{16{1'd1}},r3}:{{16{1'd0}},r3}, e[15]?{{16{1'd1}},e}:{{16{1'd0}},e}, t4);
 	register #(.DATAWIDTH(16))	REG7(clk, rst, t4[15:0], r4);
	add #(.DATAWIDTH(32))	ADD8(r4[15]?{{16{1'd1}},r4}:{{16{1'd0}},r4}, f[15]?{{16{1'd1}},f}:{{16{1'd0}},f}, t5);
 	register #(.DATAWIDTH(16))	REG9(clk, rst, t5[15:0], r5);
	add #(.DATAWIDTH(32))	ADD10(r5[15]?{{16{1'd1}},r5}:{{16{1'd0}},r5}, g[15]?{{16{1'd1}},g}:{{16{1'd0}},g}, t6);
 	register #(.DATAWIDTH(16))	REG11(clk, rst, t6[15:0], r6);
	add #(.DATAWIDTH(32))	ADD12(r6[15]?{{16{1'd1}},r6}:{{16{1'd0}},r6}, h[15]?{{16{1'd1}},h}:{{16{1'd0}},h}, t7);
 	register #(.DATAWIDTH(16))	REG13(clk, rst, t7[15:0], r7);
	div #(.DATAWIDTH(16))	DIV14(r7, num, avgwire);
 	assign avg = avgwire;
endmodule